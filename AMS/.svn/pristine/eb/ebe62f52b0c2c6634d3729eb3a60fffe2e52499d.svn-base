package io.realm;


import android.annotation.TargetApi;
import android.os.Build;
import android.util.JsonReader;
import android.util.JsonToken;
import io.realm.exceptions.RealmMigrationNeededException;
import io.realm.internal.ColumnInfo;
import io.realm.internal.LinkView;
import io.realm.internal.OsObject;
import io.realm.internal.OsObjectSchemaInfo;
import io.realm.internal.Property;
import io.realm.internal.RealmObjectProxy;
import io.realm.internal.Row;
import io.realm.internal.SharedRealm;
import io.realm.internal.Table;
import io.realm.internal.android.JsonUtils;
import io.realm.log.RealmLog;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

@SuppressWarnings("all")
public class TarantulaInfoRealmProxy extends com.sylvester.ams.model.TarantulaInfo
    implements RealmObjectProxy, TarantulaInfoRealmProxyInterface {

    static final class TarantulaInfoColumnInfo extends ColumnInfo {
        long scientific_nameIndex;
        long common_nameIndex;
        long typeIndex;
        long behaviorIndex;
        long distributionIndex;
        long habitatIndex;
        long temperature_lowIndex;
        long temperature_highIndex;
        long humidity_lowIndex;
        long humidity_highIndex;

        TarantulaInfoColumnInfo(SharedRealm realm, Table table) {
            super(10);
            this.scientific_nameIndex = addColumnDetails(table, "scientific_name", RealmFieldType.STRING);
            this.common_nameIndex = addColumnDetails(table, "common_name", RealmFieldType.STRING);
            this.typeIndex = addColumnDetails(table, "type", RealmFieldType.STRING);
            this.behaviorIndex = addColumnDetails(table, "behavior", RealmFieldType.STRING);
            this.distributionIndex = addColumnDetails(table, "distribution", RealmFieldType.STRING);
            this.habitatIndex = addColumnDetails(table, "habitat", RealmFieldType.STRING);
            this.temperature_lowIndex = addColumnDetails(table, "temperature_low", RealmFieldType.FLOAT);
            this.temperature_highIndex = addColumnDetails(table, "temperature_high", RealmFieldType.FLOAT);
            this.humidity_lowIndex = addColumnDetails(table, "humidity_low", RealmFieldType.FLOAT);
            this.humidity_highIndex = addColumnDetails(table, "humidity_high", RealmFieldType.FLOAT);
        }

        TarantulaInfoColumnInfo(ColumnInfo src, boolean mutable) {
            super(src, mutable);
            copy(src, this);
        }

        @Override
        protected final ColumnInfo copy(boolean mutable) {
            return new TarantulaInfoColumnInfo(this, mutable);
        }

        @Override
        protected final void copy(ColumnInfo rawSrc, ColumnInfo rawDst) {
            final TarantulaInfoColumnInfo src = (TarantulaInfoColumnInfo) rawSrc;
            final TarantulaInfoColumnInfo dst = (TarantulaInfoColumnInfo) rawDst;
            dst.scientific_nameIndex = src.scientific_nameIndex;
            dst.common_nameIndex = src.common_nameIndex;
            dst.typeIndex = src.typeIndex;
            dst.behaviorIndex = src.behaviorIndex;
            dst.distributionIndex = src.distributionIndex;
            dst.habitatIndex = src.habitatIndex;
            dst.temperature_lowIndex = src.temperature_lowIndex;
            dst.temperature_highIndex = src.temperature_highIndex;
            dst.humidity_lowIndex = src.humidity_lowIndex;
            dst.humidity_highIndex = src.humidity_highIndex;
        }
    }

    private TarantulaInfoColumnInfo columnInfo;
    private ProxyState<com.sylvester.ams.model.TarantulaInfo> proxyState;
    private static final OsObjectSchemaInfo expectedObjectSchemaInfo = createExpectedObjectSchemaInfo();
    private static final List<String> FIELD_NAMES;
    static {
        List<String> fieldNames = new ArrayList<String>();
        fieldNames.add("scientific_name");
        fieldNames.add("common_name");
        fieldNames.add("type");
        fieldNames.add("behavior");
        fieldNames.add("distribution");
        fieldNames.add("habitat");
        fieldNames.add("temperature_low");
        fieldNames.add("temperature_high");
        fieldNames.add("humidity_low");
        fieldNames.add("humidity_high");
        FIELD_NAMES = Collections.unmodifiableList(fieldNames);
    }

    TarantulaInfoRealmProxy() {
        proxyState.setConstructionFinished();
    }

    @Override
    public void realm$injectObjectContext() {
        if (this.proxyState != null) {
            return;
        }
        final BaseRealm.RealmObjectContext context = BaseRealm.objectContext.get();
        this.columnInfo = (TarantulaInfoColumnInfo) context.getColumnInfo();
        this.proxyState = new ProxyState<com.sylvester.ams.model.TarantulaInfo>(this);
        proxyState.setRealm$realm(context.getRealm());
        proxyState.setRow$realm(context.getRow());
        proxyState.setAcceptDefaultValue$realm(context.getAcceptDefaultValue());
        proxyState.setExcludeFields$realm(context.getExcludeFields());
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$scientific_name() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.scientific_nameIndex);
    }

    @Override
    public void realmSet$scientific_name(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'scientific_name' to null.");
            }
            row.getTable().setString(columnInfo.scientific_nameIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            throw new IllegalArgumentException("Trying to set non-nullable field 'scientific_name' to null.");
        }
        proxyState.getRow$realm().setString(columnInfo.scientific_nameIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$common_name() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.common_nameIndex);
    }

    @Override
    public void realmSet$common_name(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.common_nameIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.common_nameIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.common_nameIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.common_nameIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$type() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.typeIndex);
    }

    @Override
    public void realmSet$type(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.typeIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.typeIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.typeIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.typeIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$behavior() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.behaviorIndex);
    }

    @Override
    public void realmSet$behavior(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.behaviorIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.behaviorIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.behaviorIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.behaviorIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$distribution() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.distributionIndex);
    }

    @Override
    public void realmSet$distribution(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.distributionIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.distributionIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.distributionIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.distributionIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public String realmGet$habitat() {
        proxyState.getRealm$realm().checkIfValid();
        return (java.lang.String) proxyState.getRow$realm().getString(columnInfo.habitatIndex);
    }

    @Override
    public void realmSet$habitat(String value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            if (value == null) {
                row.getTable().setNull(columnInfo.habitatIndex, row.getIndex(), true);
                return;
            }
            row.getTable().setString(columnInfo.habitatIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        if (value == null) {
            proxyState.getRow$realm().setNull(columnInfo.habitatIndex);
            return;
        }
        proxyState.getRow$realm().setString(columnInfo.habitatIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public float realmGet$temperature_low() {
        proxyState.getRealm$realm().checkIfValid();
        return (float) proxyState.getRow$realm().getFloat(columnInfo.temperature_lowIndex);
    }

    @Override
    public void realmSet$temperature_low(float value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setFloat(columnInfo.temperature_lowIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setFloat(columnInfo.temperature_lowIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public float realmGet$temperature_high() {
        proxyState.getRealm$realm().checkIfValid();
        return (float) proxyState.getRow$realm().getFloat(columnInfo.temperature_highIndex);
    }

    @Override
    public void realmSet$temperature_high(float value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setFloat(columnInfo.temperature_highIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setFloat(columnInfo.temperature_highIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public float realmGet$humidity_low() {
        proxyState.getRealm$realm().checkIfValid();
        return (float) proxyState.getRow$realm().getFloat(columnInfo.humidity_lowIndex);
    }

    @Override
    public void realmSet$humidity_low(float value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setFloat(columnInfo.humidity_lowIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setFloat(columnInfo.humidity_lowIndex, value);
    }

    @Override
    @SuppressWarnings("cast")
    public float realmGet$humidity_high() {
        proxyState.getRealm$realm().checkIfValid();
        return (float) proxyState.getRow$realm().getFloat(columnInfo.humidity_highIndex);
    }

    @Override
    public void realmSet$humidity_high(float value) {
        if (proxyState.isUnderConstruction()) {
            if (!proxyState.getAcceptDefaultValue$realm()) {
                return;
            }
            final Row row = proxyState.getRow$realm();
            row.getTable().setFloat(columnInfo.humidity_highIndex, row.getIndex(), value, true);
            return;
        }

        proxyState.getRealm$realm().checkIfValid();
        proxyState.getRow$realm().setFloat(columnInfo.humidity_highIndex, value);
    }

    private static OsObjectSchemaInfo createExpectedObjectSchemaInfo() {
        OsObjectSchemaInfo.Builder builder = new OsObjectSchemaInfo.Builder("TarantulaInfo");
        builder.addProperty("scientific_name", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
        builder.addProperty("common_name", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
        builder.addProperty("type", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
        builder.addProperty("behavior", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
        builder.addProperty("distribution", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
        builder.addProperty("habitat", RealmFieldType.STRING, !Property.PRIMARY_KEY, !Property.INDEXED, !Property.REQUIRED);
        builder.addProperty("temperature_low", RealmFieldType.FLOAT, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
        builder.addProperty("temperature_high", RealmFieldType.FLOAT, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
        builder.addProperty("humidity_low", RealmFieldType.FLOAT, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
        builder.addProperty("humidity_high", RealmFieldType.FLOAT, !Property.PRIMARY_KEY, !Property.INDEXED, Property.REQUIRED);
        return builder.build();
    }

    public static OsObjectSchemaInfo getExpectedObjectSchemaInfo() {
         return expectedObjectSchemaInfo;
    }

    public static TarantulaInfoColumnInfo validateTable(SharedRealm sharedRealm, boolean allowExtraColumns) {
        if (!sharedRealm.hasTable("class_TarantulaInfo")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "The 'TarantulaInfo' class is missing from the schema for this Realm.");
        }
        Table table = sharedRealm.getTable("class_TarantulaInfo");
        final long columnCount = table.getColumnCount();
        if (columnCount != 10) {
            if (columnCount < 10) {
                throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field count is less than expected - expected 10 but was " + columnCount);
            }
            if (allowExtraColumns) {
                RealmLog.debug("Field count is more than expected - expected 10 but was %1$d", columnCount);
            } else {
                throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field count is more than expected - expected 10 but was " + columnCount);
            }
        }
        Map<String, RealmFieldType> columnTypes = new HashMap<String, RealmFieldType>();
        for (long i = 0; i < columnCount; i++) {
            columnTypes.put(table.getColumnName(i), table.getColumnType(i));
        }

        final TarantulaInfoColumnInfo columnInfo = new TarantulaInfoColumnInfo(sharedRealm, table);

        if (table.hasPrimaryKey()) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Primary Key defined for field " + table.getColumnName(table.getPrimaryKey()) + " was removed.");
        }

        if (!columnTypes.containsKey("scientific_name")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'scientific_name' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("scientific_name") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'scientific_name' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.scientific_nameIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'scientific_name' does support null values in the existing Realm file. Remove @Required or @PrimaryKey from field 'scientific_name' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("common_name")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'common_name' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("common_name") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'common_name' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.common_nameIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'common_name' is required. Either set @Required to field 'common_name' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("type")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'type' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("type") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'type' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.typeIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'type' is required. Either set @Required to field 'type' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("behavior")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'behavior' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("behavior") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'behavior' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.behaviorIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'behavior' is required. Either set @Required to field 'behavior' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("distribution")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'distribution' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("distribution") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'distribution' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.distributionIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'distribution' is required. Either set @Required to field 'distribution' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("habitat")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'habitat' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("habitat") != RealmFieldType.STRING) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'String' for field 'habitat' in existing Realm file.");
        }
        if (!table.isColumnNullable(columnInfo.habitatIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'habitat' is required. Either set @Required to field 'habitat' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("temperature_low")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'temperature_low' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("temperature_low") != RealmFieldType.FLOAT) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'float' for field 'temperature_low' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.temperature_lowIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'temperature_low' does support null values in the existing Realm file. Use corresponding boxed type for field 'temperature_low' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("temperature_high")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'temperature_high' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("temperature_high") != RealmFieldType.FLOAT) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'float' for field 'temperature_high' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.temperature_highIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'temperature_high' does support null values in the existing Realm file. Use corresponding boxed type for field 'temperature_high' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("humidity_low")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'humidity_low' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("humidity_low") != RealmFieldType.FLOAT) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'float' for field 'humidity_low' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.humidity_lowIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'humidity_low' does support null values in the existing Realm file. Use corresponding boxed type for field 'humidity_low' or migrate using RealmObjectSchema.setNullable().");
        }
        if (!columnTypes.containsKey("humidity_high")) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Missing field 'humidity_high' in existing Realm file. Either remove field or migrate using io.realm.internal.Table.addColumn().");
        }
        if (columnTypes.get("humidity_high") != RealmFieldType.FLOAT) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Invalid type 'float' for field 'humidity_high' in existing Realm file.");
        }
        if (table.isColumnNullable(columnInfo.humidity_highIndex)) {
            throw new RealmMigrationNeededException(sharedRealm.getPath(), "Field 'humidity_high' does support null values in the existing Realm file. Use corresponding boxed type for field 'humidity_high' or migrate using RealmObjectSchema.setNullable().");
        }

        return columnInfo;
    }

    public static String getTableName() {
        return "class_TarantulaInfo";
    }

    public static List<String> getFieldNames() {
        return FIELD_NAMES;
    }

    @SuppressWarnings("cast")
    public static com.sylvester.ams.model.TarantulaInfo createOrUpdateUsingJsonObject(Realm realm, JSONObject json, boolean update)
        throws JSONException {
        final List<String> excludeFields = Collections.<String> emptyList();
        com.sylvester.ams.model.TarantulaInfo obj = realm.createObjectInternal(com.sylvester.ams.model.TarantulaInfo.class, true, excludeFields);
        if (json.has("scientific_name")) {
            if (json.isNull("scientific_name")) {
                ((TarantulaInfoRealmProxyInterface) obj).realmSet$scientific_name(null);
            } else {
                ((TarantulaInfoRealmProxyInterface) obj).realmSet$scientific_name((String) json.getString("scientific_name"));
            }
        }
        if (json.has("common_name")) {
            if (json.isNull("common_name")) {
                ((TarantulaInfoRealmProxyInterface) obj).realmSet$common_name(null);
            } else {
                ((TarantulaInfoRealmProxyInterface) obj).realmSet$common_name((String) json.getString("common_name"));
            }
        }
        if (json.has("type")) {
            if (json.isNull("type")) {
                ((TarantulaInfoRealmProxyInterface) obj).realmSet$type(null);
            } else {
                ((TarantulaInfoRealmProxyInterface) obj).realmSet$type((String) json.getString("type"));
            }
        }
        if (json.has("behavior")) {
            if (json.isNull("behavior")) {
                ((TarantulaInfoRealmProxyInterface) obj).realmSet$behavior(null);
            } else {
                ((TarantulaInfoRealmProxyInterface) obj).realmSet$behavior((String) json.getString("behavior"));
            }
        }
        if (json.has("distribution")) {
            if (json.isNull("distribution")) {
                ((TarantulaInfoRealmProxyInterface) obj).realmSet$distribution(null);
            } else {
                ((TarantulaInfoRealmProxyInterface) obj).realmSet$distribution((String) json.getString("distribution"));
            }
        }
        if (json.has("habitat")) {
            if (json.isNull("habitat")) {
                ((TarantulaInfoRealmProxyInterface) obj).realmSet$habitat(null);
            } else {
                ((TarantulaInfoRealmProxyInterface) obj).realmSet$habitat((String) json.getString("habitat"));
            }
        }
        if (json.has("temperature_low")) {
            if (json.isNull("temperature_low")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'temperature_low' to null.");
            } else {
                ((TarantulaInfoRealmProxyInterface) obj).realmSet$temperature_low((float) json.getDouble("temperature_low"));
            }
        }
        if (json.has("temperature_high")) {
            if (json.isNull("temperature_high")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'temperature_high' to null.");
            } else {
                ((TarantulaInfoRealmProxyInterface) obj).realmSet$temperature_high((float) json.getDouble("temperature_high"));
            }
        }
        if (json.has("humidity_low")) {
            if (json.isNull("humidity_low")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'humidity_low' to null.");
            } else {
                ((TarantulaInfoRealmProxyInterface) obj).realmSet$humidity_low((float) json.getDouble("humidity_low"));
            }
        }
        if (json.has("humidity_high")) {
            if (json.isNull("humidity_high")) {
                throw new IllegalArgumentException("Trying to set non-nullable field 'humidity_high' to null.");
            } else {
                ((TarantulaInfoRealmProxyInterface) obj).realmSet$humidity_high((float) json.getDouble("humidity_high"));
            }
        }
        return obj;
    }

    @SuppressWarnings("cast")
    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
    public static com.sylvester.ams.model.TarantulaInfo createUsingJsonStream(Realm realm, JsonReader reader)
        throws IOException {
        com.sylvester.ams.model.TarantulaInfo obj = new com.sylvester.ams.model.TarantulaInfo();
        reader.beginObject();
        while (reader.hasNext()) {
            String name = reader.nextName();
            if (false) {
            } else if (name.equals("scientific_name")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((TarantulaInfoRealmProxyInterface) obj).realmSet$scientific_name(null);
                } else {
                    ((TarantulaInfoRealmProxyInterface) obj).realmSet$scientific_name((String) reader.nextString());
                }
            } else if (name.equals("common_name")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((TarantulaInfoRealmProxyInterface) obj).realmSet$common_name(null);
                } else {
                    ((TarantulaInfoRealmProxyInterface) obj).realmSet$common_name((String) reader.nextString());
                }
            } else if (name.equals("type")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((TarantulaInfoRealmProxyInterface) obj).realmSet$type(null);
                } else {
                    ((TarantulaInfoRealmProxyInterface) obj).realmSet$type((String) reader.nextString());
                }
            } else if (name.equals("behavior")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((TarantulaInfoRealmProxyInterface) obj).realmSet$behavior(null);
                } else {
                    ((TarantulaInfoRealmProxyInterface) obj).realmSet$behavior((String) reader.nextString());
                }
            } else if (name.equals("distribution")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((TarantulaInfoRealmProxyInterface) obj).realmSet$distribution(null);
                } else {
                    ((TarantulaInfoRealmProxyInterface) obj).realmSet$distribution((String) reader.nextString());
                }
            } else if (name.equals("habitat")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    ((TarantulaInfoRealmProxyInterface) obj).realmSet$habitat(null);
                } else {
                    ((TarantulaInfoRealmProxyInterface) obj).realmSet$habitat((String) reader.nextString());
                }
            } else if (name.equals("temperature_low")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'temperature_low' to null.");
                } else {
                    ((TarantulaInfoRealmProxyInterface) obj).realmSet$temperature_low((float) reader.nextDouble());
                }
            } else if (name.equals("temperature_high")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'temperature_high' to null.");
                } else {
                    ((TarantulaInfoRealmProxyInterface) obj).realmSet$temperature_high((float) reader.nextDouble());
                }
            } else if (name.equals("humidity_low")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'humidity_low' to null.");
                } else {
                    ((TarantulaInfoRealmProxyInterface) obj).realmSet$humidity_low((float) reader.nextDouble());
                }
            } else if (name.equals("humidity_high")) {
                if (reader.peek() == JsonToken.NULL) {
                    reader.skipValue();
                    throw new IllegalArgumentException("Trying to set non-nullable field 'humidity_high' to null.");
                } else {
                    ((TarantulaInfoRealmProxyInterface) obj).realmSet$humidity_high((float) reader.nextDouble());
                }
            } else {
                reader.skipValue();
            }
        }
        reader.endObject();
        obj = realm.copyToRealm(obj);
        return obj;
    }

    public static com.sylvester.ams.model.TarantulaInfo copyOrUpdate(Realm realm, com.sylvester.ams.model.TarantulaInfo object, boolean update, Map<RealmModel,RealmObjectProxy> cache) {
        if (object instanceof RealmObjectProxy && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm() != null && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm().threadId != realm.threadId) {
            throw new IllegalArgumentException("Objects which belong to Realm instances in other threads cannot be copied into this Realm instance.");
        }
        if (object instanceof RealmObjectProxy && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm() != null && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm().getPath().equals(realm.getPath())) {
            return object;
        }
        final BaseRealm.RealmObjectContext objectContext = BaseRealm.objectContext.get();
        RealmObjectProxy cachedRealmObject = cache.get(object);
        if (cachedRealmObject != null) {
            return (com.sylvester.ams.model.TarantulaInfo) cachedRealmObject;
        }

        return copy(realm, object, update, cache);
    }

    public static com.sylvester.ams.model.TarantulaInfo copy(Realm realm, com.sylvester.ams.model.TarantulaInfo newObject, boolean update, Map<RealmModel,RealmObjectProxy> cache) {
        RealmObjectProxy cachedRealmObject = cache.get(newObject);
        if (cachedRealmObject != null) {
            return (com.sylvester.ams.model.TarantulaInfo) cachedRealmObject;
        }

        // rejecting default values to avoid creating unexpected objects from RealmModel/RealmList fields.
        com.sylvester.ams.model.TarantulaInfo realmObject = realm.createObjectInternal(com.sylvester.ams.model.TarantulaInfo.class, false, Collections.<String>emptyList());
        cache.put(newObject, (RealmObjectProxy) realmObject);

        TarantulaInfoRealmProxyInterface realmObjectSource = (TarantulaInfoRealmProxyInterface) newObject;
        TarantulaInfoRealmProxyInterface realmObjectCopy = (TarantulaInfoRealmProxyInterface) realmObject;

        realmObjectCopy.realmSet$scientific_name(realmObjectSource.realmGet$scientific_name());
        realmObjectCopy.realmSet$common_name(realmObjectSource.realmGet$common_name());
        realmObjectCopy.realmSet$type(realmObjectSource.realmGet$type());
        realmObjectCopy.realmSet$behavior(realmObjectSource.realmGet$behavior());
        realmObjectCopy.realmSet$distribution(realmObjectSource.realmGet$distribution());
        realmObjectCopy.realmSet$habitat(realmObjectSource.realmGet$habitat());
        realmObjectCopy.realmSet$temperature_low(realmObjectSource.realmGet$temperature_low());
        realmObjectCopy.realmSet$temperature_high(realmObjectSource.realmGet$temperature_high());
        realmObjectCopy.realmSet$humidity_low(realmObjectSource.realmGet$humidity_low());
        realmObjectCopy.realmSet$humidity_high(realmObjectSource.realmGet$humidity_high());
        return realmObject;
    }

    public static long insert(Realm realm, com.sylvester.ams.model.TarantulaInfo object, Map<RealmModel,Long> cache) {
        if (object instanceof RealmObjectProxy && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm() != null && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm().getPath().equals(realm.getPath())) {
            return ((RealmObjectProxy) object).realmGet$proxyState().getRow$realm().getIndex();
        }
        Table table = realm.getTable(com.sylvester.ams.model.TarantulaInfo.class);
        long tableNativePtr = table.getNativePtr();
        TarantulaInfoColumnInfo columnInfo = (TarantulaInfoColumnInfo) realm.schema.getColumnInfo(com.sylvester.ams.model.TarantulaInfo.class);
        long rowIndex = OsObject.createRow(table);
        cache.put(object, rowIndex);
        String realmGet$scientific_name = ((TarantulaInfoRealmProxyInterface) object).realmGet$scientific_name();
        if (realmGet$scientific_name != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.scientific_nameIndex, rowIndex, realmGet$scientific_name, false);
        }
        String realmGet$common_name = ((TarantulaInfoRealmProxyInterface) object).realmGet$common_name();
        if (realmGet$common_name != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.common_nameIndex, rowIndex, realmGet$common_name, false);
        }
        String realmGet$type = ((TarantulaInfoRealmProxyInterface) object).realmGet$type();
        if (realmGet$type != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.typeIndex, rowIndex, realmGet$type, false);
        }
        String realmGet$behavior = ((TarantulaInfoRealmProxyInterface) object).realmGet$behavior();
        if (realmGet$behavior != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.behaviorIndex, rowIndex, realmGet$behavior, false);
        }
        String realmGet$distribution = ((TarantulaInfoRealmProxyInterface) object).realmGet$distribution();
        if (realmGet$distribution != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.distributionIndex, rowIndex, realmGet$distribution, false);
        }
        String realmGet$habitat = ((TarantulaInfoRealmProxyInterface) object).realmGet$habitat();
        if (realmGet$habitat != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.habitatIndex, rowIndex, realmGet$habitat, false);
        }
        Table.nativeSetFloat(tableNativePtr, columnInfo.temperature_lowIndex, rowIndex, ((TarantulaInfoRealmProxyInterface) object).realmGet$temperature_low(), false);
        Table.nativeSetFloat(tableNativePtr, columnInfo.temperature_highIndex, rowIndex, ((TarantulaInfoRealmProxyInterface) object).realmGet$temperature_high(), false);
        Table.nativeSetFloat(tableNativePtr, columnInfo.humidity_lowIndex, rowIndex, ((TarantulaInfoRealmProxyInterface) object).realmGet$humidity_low(), false);
        Table.nativeSetFloat(tableNativePtr, columnInfo.humidity_highIndex, rowIndex, ((TarantulaInfoRealmProxyInterface) object).realmGet$humidity_high(), false);
        return rowIndex;
    }

    public static void insert(Realm realm, Iterator<? extends RealmModel> objects, Map<RealmModel,Long> cache) {
        Table table = realm.getTable(com.sylvester.ams.model.TarantulaInfo.class);
        long tableNativePtr = table.getNativePtr();
        TarantulaInfoColumnInfo columnInfo = (TarantulaInfoColumnInfo) realm.schema.getColumnInfo(com.sylvester.ams.model.TarantulaInfo.class);
        com.sylvester.ams.model.TarantulaInfo object = null;
        while (objects.hasNext()) {
            object = (com.sylvester.ams.model.TarantulaInfo) objects.next();
            if (cache.containsKey(object)) {
                continue;
            }
            if (object instanceof RealmObjectProxy && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm() != null && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm().getPath().equals(realm.getPath())) {
                cache.put(object, ((RealmObjectProxy) object).realmGet$proxyState().getRow$realm().getIndex());
                continue;
            }
            long rowIndex = OsObject.createRow(table);
            cache.put(object, rowIndex);
            String realmGet$scientific_name = ((TarantulaInfoRealmProxyInterface) object).realmGet$scientific_name();
            if (realmGet$scientific_name != null) {
                Table.nativeSetString(tableNativePtr, columnInfo.scientific_nameIndex, rowIndex, realmGet$scientific_name, false);
            }
            String realmGet$common_name = ((TarantulaInfoRealmProxyInterface) object).realmGet$common_name();
            if (realmGet$common_name != null) {
                Table.nativeSetString(tableNativePtr, columnInfo.common_nameIndex, rowIndex, realmGet$common_name, false);
            }
            String realmGet$type = ((TarantulaInfoRealmProxyInterface) object).realmGet$type();
            if (realmGet$type != null) {
                Table.nativeSetString(tableNativePtr, columnInfo.typeIndex, rowIndex, realmGet$type, false);
            }
            String realmGet$behavior = ((TarantulaInfoRealmProxyInterface) object).realmGet$behavior();
            if (realmGet$behavior != null) {
                Table.nativeSetString(tableNativePtr, columnInfo.behaviorIndex, rowIndex, realmGet$behavior, false);
            }
            String realmGet$distribution = ((TarantulaInfoRealmProxyInterface) object).realmGet$distribution();
            if (realmGet$distribution != null) {
                Table.nativeSetString(tableNativePtr, columnInfo.distributionIndex, rowIndex, realmGet$distribution, false);
            }
            String realmGet$habitat = ((TarantulaInfoRealmProxyInterface) object).realmGet$habitat();
            if (realmGet$habitat != null) {
                Table.nativeSetString(tableNativePtr, columnInfo.habitatIndex, rowIndex, realmGet$habitat, false);
            }
            Table.nativeSetFloat(tableNativePtr, columnInfo.temperature_lowIndex, rowIndex, ((TarantulaInfoRealmProxyInterface) object).realmGet$temperature_low(), false);
            Table.nativeSetFloat(tableNativePtr, columnInfo.temperature_highIndex, rowIndex, ((TarantulaInfoRealmProxyInterface) object).realmGet$temperature_high(), false);
            Table.nativeSetFloat(tableNativePtr, columnInfo.humidity_lowIndex, rowIndex, ((TarantulaInfoRealmProxyInterface) object).realmGet$humidity_low(), false);
            Table.nativeSetFloat(tableNativePtr, columnInfo.humidity_highIndex, rowIndex, ((TarantulaInfoRealmProxyInterface) object).realmGet$humidity_high(), false);
        }
    }

    public static long insertOrUpdate(Realm realm, com.sylvester.ams.model.TarantulaInfo object, Map<RealmModel,Long> cache) {
        if (object instanceof RealmObjectProxy && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm() != null && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm().getPath().equals(realm.getPath())) {
            return ((RealmObjectProxy) object).realmGet$proxyState().getRow$realm().getIndex();
        }
        Table table = realm.getTable(com.sylvester.ams.model.TarantulaInfo.class);
        long tableNativePtr = table.getNativePtr();
        TarantulaInfoColumnInfo columnInfo = (TarantulaInfoColumnInfo) realm.schema.getColumnInfo(com.sylvester.ams.model.TarantulaInfo.class);
        long rowIndex = OsObject.createRow(table);
        cache.put(object, rowIndex);
        String realmGet$scientific_name = ((TarantulaInfoRealmProxyInterface) object).realmGet$scientific_name();
        if (realmGet$scientific_name != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.scientific_nameIndex, rowIndex, realmGet$scientific_name, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.scientific_nameIndex, rowIndex, false);
        }
        String realmGet$common_name = ((TarantulaInfoRealmProxyInterface) object).realmGet$common_name();
        if (realmGet$common_name != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.common_nameIndex, rowIndex, realmGet$common_name, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.common_nameIndex, rowIndex, false);
        }
        String realmGet$type = ((TarantulaInfoRealmProxyInterface) object).realmGet$type();
        if (realmGet$type != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.typeIndex, rowIndex, realmGet$type, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.typeIndex, rowIndex, false);
        }
        String realmGet$behavior = ((TarantulaInfoRealmProxyInterface) object).realmGet$behavior();
        if (realmGet$behavior != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.behaviorIndex, rowIndex, realmGet$behavior, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.behaviorIndex, rowIndex, false);
        }
        String realmGet$distribution = ((TarantulaInfoRealmProxyInterface) object).realmGet$distribution();
        if (realmGet$distribution != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.distributionIndex, rowIndex, realmGet$distribution, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.distributionIndex, rowIndex, false);
        }
        String realmGet$habitat = ((TarantulaInfoRealmProxyInterface) object).realmGet$habitat();
        if (realmGet$habitat != null) {
            Table.nativeSetString(tableNativePtr, columnInfo.habitatIndex, rowIndex, realmGet$habitat, false);
        } else {
            Table.nativeSetNull(tableNativePtr, columnInfo.habitatIndex, rowIndex, false);
        }
        Table.nativeSetFloat(tableNativePtr, columnInfo.temperature_lowIndex, rowIndex, ((TarantulaInfoRealmProxyInterface) object).realmGet$temperature_low(), false);
        Table.nativeSetFloat(tableNativePtr, columnInfo.temperature_highIndex, rowIndex, ((TarantulaInfoRealmProxyInterface) object).realmGet$temperature_high(), false);
        Table.nativeSetFloat(tableNativePtr, columnInfo.humidity_lowIndex, rowIndex, ((TarantulaInfoRealmProxyInterface) object).realmGet$humidity_low(), false);
        Table.nativeSetFloat(tableNativePtr, columnInfo.humidity_highIndex, rowIndex, ((TarantulaInfoRealmProxyInterface) object).realmGet$humidity_high(), false);
        return rowIndex;
    }

    public static void insertOrUpdate(Realm realm, Iterator<? extends RealmModel> objects, Map<RealmModel,Long> cache) {
        Table table = realm.getTable(com.sylvester.ams.model.TarantulaInfo.class);
        long tableNativePtr = table.getNativePtr();
        TarantulaInfoColumnInfo columnInfo = (TarantulaInfoColumnInfo) realm.schema.getColumnInfo(com.sylvester.ams.model.TarantulaInfo.class);
        com.sylvester.ams.model.TarantulaInfo object = null;
        while (objects.hasNext()) {
            object = (com.sylvester.ams.model.TarantulaInfo) objects.next();
            if (cache.containsKey(object)) {
                continue;
            }
            if (object instanceof RealmObjectProxy && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm() != null && ((RealmObjectProxy) object).realmGet$proxyState().getRealm$realm().getPath().equals(realm.getPath())) {
                cache.put(object, ((RealmObjectProxy) object).realmGet$proxyState().getRow$realm().getIndex());
                continue;
            }
            long rowIndex = OsObject.createRow(table);
            cache.put(object, rowIndex);
            String realmGet$scientific_name = ((TarantulaInfoRealmProxyInterface) object).realmGet$scientific_name();
            if (realmGet$scientific_name != null) {
                Table.nativeSetString(tableNativePtr, columnInfo.scientific_nameIndex, rowIndex, realmGet$scientific_name, false);
            } else {
                Table.nativeSetNull(tableNativePtr, columnInfo.scientific_nameIndex, rowIndex, false);
            }
            String realmGet$common_name = ((TarantulaInfoRealmProxyInterface) object).realmGet$common_name();
            if (realmGet$common_name != null) {
                Table.nativeSetString(tableNativePtr, columnInfo.common_nameIndex, rowIndex, realmGet$common_name, false);
            } else {
                Table.nativeSetNull(tableNativePtr, columnInfo.common_nameIndex, rowIndex, false);
            }
            String realmGet$type = ((TarantulaInfoRealmProxyInterface) object).realmGet$type();
            if (realmGet$type != null) {
                Table.nativeSetString(tableNativePtr, columnInfo.typeIndex, rowIndex, realmGet$type, false);
            } else {
                Table.nativeSetNull(tableNativePtr, columnInfo.typeIndex, rowIndex, false);
            }
            String realmGet$behavior = ((TarantulaInfoRealmProxyInterface) object).realmGet$behavior();
            if (realmGet$behavior != null) {
                Table.nativeSetString(tableNativePtr, columnInfo.behaviorIndex, rowIndex, realmGet$behavior, false);
            } else {
                Table.nativeSetNull(tableNativePtr, columnInfo.behaviorIndex, rowIndex, false);
            }
            String realmGet$distribution = ((TarantulaInfoRealmProxyInterface) object).realmGet$distribution();
            if (realmGet$distribution != null) {
                Table.nativeSetString(tableNativePtr, columnInfo.distributionIndex, rowIndex, realmGet$distribution, false);
            } else {
                Table.nativeSetNull(tableNativePtr, columnInfo.distributionIndex, rowIndex, false);
            }
            String realmGet$habitat = ((TarantulaInfoRealmProxyInterface) object).realmGet$habitat();
            if (realmGet$habitat != null) {
                Table.nativeSetString(tableNativePtr, columnInfo.habitatIndex, rowIndex, realmGet$habitat, false);
            } else {
                Table.nativeSetNull(tableNativePtr, columnInfo.habitatIndex, rowIndex, false);
            }
            Table.nativeSetFloat(tableNativePtr, columnInfo.temperature_lowIndex, rowIndex, ((TarantulaInfoRealmProxyInterface) object).realmGet$temperature_low(), false);
            Table.nativeSetFloat(tableNativePtr, columnInfo.temperature_highIndex, rowIndex, ((TarantulaInfoRealmProxyInterface) object).realmGet$temperature_high(), false);
            Table.nativeSetFloat(tableNativePtr, columnInfo.humidity_lowIndex, rowIndex, ((TarantulaInfoRealmProxyInterface) object).realmGet$humidity_low(), false);
            Table.nativeSetFloat(tableNativePtr, columnInfo.humidity_highIndex, rowIndex, ((TarantulaInfoRealmProxyInterface) object).realmGet$humidity_high(), false);
        }
    }

    public static com.sylvester.ams.model.TarantulaInfo createDetachedCopy(com.sylvester.ams.model.TarantulaInfo realmObject, int currentDepth, int maxDepth, Map<RealmModel, CacheData<RealmModel>> cache) {
        if (currentDepth > maxDepth || realmObject == null) {
            return null;
        }
        CacheData<RealmModel> cachedObject = cache.get(realmObject);
        com.sylvester.ams.model.TarantulaInfo unmanagedObject;
        if (cachedObject == null) {
            unmanagedObject = new com.sylvester.ams.model.TarantulaInfo();
            cache.put(realmObject, new RealmObjectProxy.CacheData<RealmModel>(currentDepth, unmanagedObject));
        } else {
            // Reuse cached object or recreate it because it was encountered at a lower depth.
            if (currentDepth >= cachedObject.minDepth) {
                return (com.sylvester.ams.model.TarantulaInfo) cachedObject.object;
            }
            unmanagedObject = (com.sylvester.ams.model.TarantulaInfo) cachedObject.object;
            cachedObject.minDepth = currentDepth;
        }
        TarantulaInfoRealmProxyInterface unmanagedCopy = (TarantulaInfoRealmProxyInterface) unmanagedObject;
        TarantulaInfoRealmProxyInterface realmSource = (TarantulaInfoRealmProxyInterface) realmObject;
        unmanagedCopy.realmSet$scientific_name(realmSource.realmGet$scientific_name());
        unmanagedCopy.realmSet$common_name(realmSource.realmGet$common_name());
        unmanagedCopy.realmSet$type(realmSource.realmGet$type());
        unmanagedCopy.realmSet$behavior(realmSource.realmGet$behavior());
        unmanagedCopy.realmSet$distribution(realmSource.realmGet$distribution());
        unmanagedCopy.realmSet$habitat(realmSource.realmGet$habitat());
        unmanagedCopy.realmSet$temperature_low(realmSource.realmGet$temperature_low());
        unmanagedCopy.realmSet$temperature_high(realmSource.realmGet$temperature_high());
        unmanagedCopy.realmSet$humidity_low(realmSource.realmGet$humidity_low());
        unmanagedCopy.realmSet$humidity_high(realmSource.realmGet$humidity_high());
        return unmanagedObject;
    }

    @Override
    @SuppressWarnings("ArrayToString")
    public String toString() {
        if (!RealmObject.isValid(this)) {
            return "Invalid object";
        }
        StringBuilder stringBuilder = new StringBuilder("TarantulaInfo = proxy[");
        stringBuilder.append("{scientific_name:");
        stringBuilder.append(realmGet$scientific_name());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{common_name:");
        stringBuilder.append(realmGet$common_name() != null ? realmGet$common_name() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{type:");
        stringBuilder.append(realmGet$type() != null ? realmGet$type() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{behavior:");
        stringBuilder.append(realmGet$behavior() != null ? realmGet$behavior() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{distribution:");
        stringBuilder.append(realmGet$distribution() != null ? realmGet$distribution() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{habitat:");
        stringBuilder.append(realmGet$habitat() != null ? realmGet$habitat() : "null");
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{temperature_low:");
        stringBuilder.append(realmGet$temperature_low());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{temperature_high:");
        stringBuilder.append(realmGet$temperature_high());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{humidity_low:");
        stringBuilder.append(realmGet$humidity_low());
        stringBuilder.append("}");
        stringBuilder.append(",");
        stringBuilder.append("{humidity_high:");
        stringBuilder.append(realmGet$humidity_high());
        stringBuilder.append("}");
        stringBuilder.append("]");
        return stringBuilder.toString();
    }

    @Override
    public ProxyState<?> realmGet$proxyState() {
        return proxyState;
    }

    @Override
    public int hashCode() {
        String realmName = proxyState.getRealm$realm().getPath();
        String tableName = proxyState.getRow$realm().getTable().getName();
        long rowIndex = proxyState.getRow$realm().getIndex();

        int result = 17;
        result = 31 * result + ((realmName != null) ? realmName.hashCode() : 0);
        result = 31 * result + ((tableName != null) ? tableName.hashCode() : 0);
        result = 31 * result + (int) (rowIndex ^ (rowIndex >>> 32));
        return result;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        TarantulaInfoRealmProxy aTarantulaInfo = (TarantulaInfoRealmProxy)o;

        String path = proxyState.getRealm$realm().getPath();
        String otherPath = aTarantulaInfo.proxyState.getRealm$realm().getPath();
        if (path != null ? !path.equals(otherPath) : otherPath != null) return false;

        String tableName = proxyState.getRow$realm().getTable().getName();
        String otherTableName = aTarantulaInfo.proxyState.getRow$realm().getTable().getName();
        if (tableName != null ? !tableName.equals(otherTableName) : otherTableName != null) return false;

        if (proxyState.getRow$realm().getIndex() != aTarantulaInfo.proxyState.getRow$realm().getIndex()) return false;

        return true;
    }

}
